// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/p12s/furniture-store/account/internal/repository (interfaces: Accounter)

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/p12s/furniture-store/account/internal/domain"
)

// MockAccounter is a mock of Accounter interface.
type MockAccounter struct {
	ctrl     *gomock.Controller
	recorder *MockAccounterMockRecorder
}

// MockAccounterMockRecorder is the mock recorder for MockAccounter.
type MockAccounterMockRecorder struct {
	mock *MockAccounter
}

// NewMockAccounter creates a new mock instance.
func NewMockAccounter(ctrl *gomock.Controller) *MockAccounter {
	mock := &MockAccounter{ctrl: ctrl}
	mock.recorder = &MockAccounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccounter) EXPECT() *MockAccounterMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccounter) CreateAccount(arg0 domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccounterMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccounter)(nil).CreateAccount), arg0)
}

// DeleteAccount mocks base method.
func (m *MockAccounter) DeleteAccount(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccounterMockRecorder) DeleteAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccounter)(nil).DeleteAccount), arg0)
}

// GetByCredentials mocks base method.
func (m *MockAccounter) GetByCredentials(arg0, arg1 string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCredentials", arg0, arg1)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCredentials indicates an expected call of GetByCredentials.
func (mr *MockAccounterMockRecorder) GetByCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCredentials", reflect.TypeOf((*MockAccounter)(nil).GetByCredentials), arg0, arg1)
}

// UpdateAccountInfo mocks base method.
func (m *MockAccounter) UpdateAccountInfo(arg0 domain.UpdateAccountInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountInfo indicates an expected call of UpdateAccountInfo.
func (mr *MockAccounterMockRecorder) UpdateAccountInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountInfo", reflect.TypeOf((*MockAccounter)(nil).UpdateAccountInfo), arg0)
}

// UpdateAccountRole mocks base method.
func (m *MockAccounter) UpdateAccountRole(arg0 domain.UpdateAccountRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountRole", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountRole indicates an expected call of UpdateAccountRole.
func (mr *MockAccounterMockRecorder) UpdateAccountRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountRole", reflect.TypeOf((*MockAccounter)(nil).UpdateAccountRole), arg0)
}
